Building Blocks of an Angular Application (Angular Architecture)
------------------------
What are the various important pieces which makes up an angular app... ?
	At a minimum, every app should have atleast one component which is put inside a module
	appComponent, appModule... 
As and whn the app bcomes more complex and feature rich. you may think of adding the other 
blocks to your app... 

There are 8 building blocks for an angular app :
1. Module :  ( Android --- androidmanifest.xml )
		Which describes an app... indicating what are the various pieces which this app is made up of ... 
		how many components this apps, what other building blocks this app is made up of?
		Every angular app will begin with "root module" which is named as "AppModule" and this 
		module is treated as a bootstrap module..
		main.ts ---- >		platformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));
		other than a root module, an app can also have additional modules "Feature modules"
		For example, shopping app --- > product info, user info... 
					productModule, userModule
		A module referes to a group of components, directives, pipes, services which your app is made up of.. 
		app.module.ts
		
		import { BrowserModule } from '@angular/platform-browser';
		import { NgModule } from '@angular/core'; // this is the primary library which every app should have.. 
		

		import { AppComponent } from './app.component';
		@NgModule({
		  declarations: [
			AppComponent
		  ],
		  imports: [
			BrowserModule
		  ],
		  providers: [],
		  bootstrap: [AppComponent]
		})
		export class AppModule { }
	@ usage ------> @ is a decorator, everything/piece of an app is a "class" in angular 
		a component is a class
		a directive is a class
		a pipe is a class
		a service is a class 
		
		DECORATORS ---- > are functions that modify JS classes into something specific to angular by
			attaching some "METADATA" to the class.. 
		METADATA ----> Which tells angular how to process a class	
			Note : Every decorator will have its own/specific metadata tags... 
					module -----> declaration, imports, providers,bootstrap
					Component --> selector, template, styles, styleUrls
		NgModule Metadata : 
				declarations : it is an array of components, pipes, directives..
				imports : by default, every app uses some angular inbuilt modules..."browsermodule" ..
						   if you want want your app to use forms -- > FormsModule
						   if you want your app to use rotuing --- > RouterModule... 
				providers : info about custome services in your application
				boostrap : entry point component... 
		 
		export class abcd // this can be a regular Javascript class..
		// but, my intent is to qualify/decorate this class not as a JS class, instead this 
		// class has to the interpreted as one of the angular building blocks.. 

		{
			//// your code goes heere....
			var myname:"Anantha"
			var myAge:"cannot disclose"
			void display(){
				console.log(this.myname);
			}
		}
		
2. Component ---- > Presents some kind of a UI.... (typically made up of a .html , .ts)
3. Template ----- > what the end user sees as part of the presentation layer of your app..
					A TEMPLATE cannot exist on its own.. has to be associated with a component... 
					a components UI can be defined in a template in 2 ways :
						1. html : 
						2. inline Templating : "header" / "footer" ... when your component UI is very simple and plain... 
							not too many things to present... 
								template: '<h1> Welcome to Angular World </h1>',
4. Metadata ----- >  Which tells angular how to process a class
5. Directives ------ > DOM manipulation / DOM transformation.... classes written to work on the these two (encourage re-usability)
6. Data Binding ----- > enabling the data flow between a ts class and DOM , anuglar supports both 
					    1-way (interpolation, property binding, event binding)  and 2-way (ngmodal)
7. Service ----> a application may want to do some activities/tasks without any user intervention... doing something 
				in the background... such features for an app can be implemented as a service.. 
				examples  : pulling the data from a backend server (periodically) ( live cricekt score)
							keep logging some info about the app activities to a backend/file/...... 
							
8. Dependency Injection : a (class) in a angular application wants to use something else as part of its requirement.... 
						for example, a component may want to use a service, a directive may want to use a service... 
							you can inject the dependency for that class in your class...
							import myService from './service/myService.ts'
							@Component{......}
							class mycomponent {
								// this class wnats to use a service called as "myService"
								myService logger = new myService();
								logger.warning('your bp is going very low... please eat some salt");
								logger.error(" you are going to faint now" ); 
							}
						// if this approach is used... then, there can be another component in my application who may 
						//also wnat ot use this logger service. then , the other component will also have to put the same 
						// lines of code.			
							class secondComponent{
								myService logger = new myService(); // we are creating a second instance of the same service...
								// though an instance of this already is being created and used in myComponent
								// and think there are 10 components who are also using this service.. then, you will 
								// essentially land up with 10 instances of the same service running side-by-side which may
								// lead to a lot of sync issues... 
								// to avoid this multiple instance of the same ... we can inject it as a dependency into 
								// the consumer (component)
								logger.warning('your bp is going very low... please eat some salt");
								logger.error(" you are going to faint now" ); 
								
								// DI syntax...
								constructor( private logger:myService ){
									......
								}
							}
