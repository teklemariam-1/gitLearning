Angular :

Is a framework ( collection / set of libraries).... 2009 --- )
	---> Angular JS (1).... 9 ...
	---> starting from version 2 of angular "the JS part" in the angular name is being removed
	---> 2 to current version.... with only some new feauteres being added into the version.. 
	---> angular JS to angular (1 to 2 and above)..
	---> 9 ---> IVY (new feature) (build system)
Which is used to build the UI for web applications... (VIEW)	
Component Based (Version 4 onwards) --- > A component ia a one which is used to prsent a UI to the end user... 
MVC ----> VIEW ----- > UI interface 
	Model - View - Controller ---- > 
			Model ( backend - data part of your application).... 
			View --- > prsenting the USer Interface - which enables the end user to interact with ur appp
			Controller --- > links this M and V together... 
Template Driven ----> html 	----> link of this html to a component class which is 
defined in a .ts file 
JS / TS / Dart ---> any programming language of your choice... 		
	What is and why TS ?  (JS++)
		More suitable to oops developers and easier to remember
		Because ts provides more functionality. it is a super set of javascript.
		User friendly , error detection at compile time... in JS any small change you do you app, to check it 
		correctness, you have to run the app and see that in th browser... for any errors... 
		A TS is always compiled into .js ( a browser can only understand js)... 
		Auto completion, intellisense..
2 way data binding.... (NGModal)
	Data binding ---- > every component in angular is a class (.ts), then, the UI for this component will typically come 
	from a .html file... (appComponent.ts, appComponent.html)
	The data whatever has to be shown to the end user is defined inside the component class which needs to be used in the .html
	Data binding means enabling the data to flow between component class and DOM
	Class --> DOM -- 1way
	DOM --- > class - 1way
	Class <-----> DOM
----------------------------------------------------		
Every UI application is a made up of 2 parts: 
	Appearance : looks and feel of your app (.html)
	Behavior : functionality of the app (click, select....)	--- (.ts)
-----------------------------------------------

Angular Setup 
	1. node js -- admin rights
			Raise WASP request --- IMG folks will install this for you on your system
	2. Angular CLI
			0once the node is installed... open the "node JS command prompt" --
				npm install @angular/cli
				which gives you a lot of "ng * " commands to work with angular development
	3. IDE --- > VS code --- > 
=========== Challenges with installation ===========
online 	compilers ---- 
	stackblitz.com
	codestorm.io
=====================================
How to create my first Angular App ? using angular CLI
		ng new myfirstapp ---- > creates an application which will run and produce the output
			without you typing a single line of code... 
			any developer can take this as a starting point... and work from there... 
			
			By default, this command creates a multi repo project ---- > every app will have its own node_modules folder..
			Mono Repo ---- > you can keep the node_modules folder outside the application folder and common to all 
			the apps.... 
			
Structure of your Angular app	
	Files in the root folder : 
		package.json : which ibs will be installed , dependencies for your app..
			based on this info in this file, your node_modules will get updated... 
			when you give a npm install commmand... this will read the package.json and does the installation accordingly
			
		angular.json : CLI configuration defaults..
		tsconfig.json : typescript configuration file
    Folders : 
		1. e2e -- > end to end testing
	    2. node_modules --- > all the node packages being used / referred in your angular project
		3. Src --- > important folder from a developer's perspective 
			  3 more folders : 
				a. app ---- > important folder for us... 	source code exists..
				b. assets --- > images/audio/video files to be used as part of your app can be placed here... 
				c. environments
				Files inside the "Src" folder :
					index.html ---- > the first file loaded by the browser for every angular app... 	
						it is a typical html file with (nothing specific to angular).....
							<body>
								<app-root></app-root>  // this is whre angular will take over... 
										app-root is one of the components (root component) in our angular app which we want to treat as a 
										starting point for our application
							</body>
							
					main.ts ----- > this frist code part from a anuglar point of view.. 
									different/important imports... for an angular app
									----> specify the root module for the angular application.
					Every angular application may contain different building blocks (pipe/directive/service.....) which 
						are put together into a logical bundle called as "Module" and every angular application begins with
						atleast one module called as "root module" named "AppModule"
						
						This file will suggest the browser which is the entry point module for an angulr application.. 
						
						import { enableProdMode } from '@angular/core';
						import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

						import { AppModule } from './app/app.module';
						import { environment } from './environments/environment';

						if (environment.production) {
						  enableProdMode();
						}

						platformBrowserDynamic().bootstrapModule(AppModule)
						  .catch(err => console.error(err));
					polyfills.ts -- > browser compatibility --- to support angular app to run in different browsers with 
									differnt ES standards supported..
					styles.css --- > globall CSS styles which can be used accross all parts of your application
					
					Inside SRC/app folder : 
					
					by default, a angular app will get created with one component... and every component will have 4 files associated
					1. app.component.html  --- > UI part for the component is defined here
					2. app.component.ts ---> behavior is programmed here
					3. app.component.spec.ts 
					4. app.component.css --- component specific styles are defined here..
					
					